//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

package simu5g.apps.vfogsim;

import inet.applications.contract.IApp;


simple vfogsim_cfn like IApp
{
    parameters:
        int localPort = default(-1);
        int destPort = default(3000);
        string destAddress;
        double startTime @unit("s") = default(0s);
        int tos = default(-1); // if not -1, set the Type Of Service (IPv4) / Traffic Class (IPv6) field of sent packets to this value
        
        
//        @signal[voIPGeneratedThroughput];
//        @statistic[voIPGeneratedThroughput](title="Throughput generated by the application"; unit="Bps"; source="voIPGeneratedThroughput"; record=mean,vector);
//
//		@signal[remainTime];
//        @statistic[remainTime](title="remain time of the task"; unit="s"; source="remainTime"; record=vector);
//
//		@signal[taskFinishTime];
//        @statistic[taskFinishTime](title="time used to finish the task"; unit="s"; source="taskFinishTime"; record=vector);
//
//		@signal[taskType];
//        @statistic[taskType](title="task type";source="taskType"; record=vector);
//
//		@signal[FailTime];
//        @statistic[FailTime](title="time when fail to generate a new task";source="FailTime"; record=vector);
//        
//        @signal[MigrationTime];
//        @statistic[MigrationTime](title="time when fail to migrate";source="MigrationTime"; record=vector);
        

        @display("i=block/source");
    gates:
        output socketOut;
        input socketIn;
}
